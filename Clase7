####### 15 - FEBRERO - 2018 #######

##### GRAFICAR #######

require(gplots)
require(venneuler)
require(ggplot2)

X11()
### Valores aletorios distribuidos con una t-Student
xt <- rt(100,3)
#help(rt)
hist(xt)
plot(density(xt))
sample(LETTERS,10)

#help(apply)
tt <- lapply(1:3,function(x) sample(LETTERS,10))
View(tt)

names(tt)<- c("Lucia","Katia","Elena")
tt
#### Cada elemento lo toma como un conjunto, Diagrama de Venn
venn(tt)
tt <- lapply(1:4,function(x) sample(letters,10))
tt
# paste = genera una cadena de caracteres a repetir en cada entrada que contenga el vector
names(tt) <- paste("Lista", 1:4)
tt
venn(tt)

### Para darle colores al Diagrama de Venn
IntersectMatrix <- function(tt){
allElements <- unique(unlist(tt))
outMat <- sapply(1:length(tt), function(i) allElements%in%tt[[i]])
rownames(outMat)= allElements
colnames(outMat)= names(tt)
return(outMat)
}

xx <- IntersectMatrix(tt)
print(xx[1:4,])

plot(venneuler(xx))

tt<- lapply(1:5,function(x) sample(LETTERS,15))
tt
### Con sort arregla el comando de acuerdo a cierto criterio
names(tt) <- sapply(tt, function(x) paste(sort(x), collapse = " "))
tt
venn(tt)  
help("plot")
# type = tipo de represnetacion del grafico, se puede cambiar:
plot(xt, type = "p") # Grafica solo con puntos
plot(xt, type = "b") # Grafica con puntos y lineas sin que haya una interseccion en ellos
plot(xt, type = "o") # Grafica puntos y lineas con interseccion entre estos
plot(xt, type = "h") # Gracifa recta verticales de donde esta el punto
plot(xt, type = "n") # No grafica nada
# Axes: grafica sin considerar los ejes (x,y)
plot(xt, axes = F)

# 
plot(xt, xlab = "Eje x", ylab = "Eje y", main = "Titulo aqui", sub = "Subtitulo" )


View(cars)
attach(cars)
speed
plot(cars, type="n", xlab="Velocidad (mph)", ylab="Distancia (ft)") 
points(speed[speed<15], dist[speed<15], pch="11", col ="blue")
points(speed[speed>=15], dist[speed>=15], pch=25, col ="gray")
#### Pra conectar puntos en el grafico
lines(lowess(cars), col ="red")

### Agregar peque√±os fragmentos de texto
legend(5,120,pch = c("s",25), col = c("blue","gray"), legend = c("Lento","Rapido"))



##### DEFINIR PROPIAS FUNCIONES 
### function( Numero de argumentos de los que va a depender la funcion)
F_a_C <- function(temp_F)
{
  temp_C <- (5/9)*((temp_F)-32)
  return(temp_C)
}
# Punto de ebullicion del agua
F_a_C(212)
# Punto de congelacion del agua
F_a_C(32)

#2
C_a_K <- function(temp_C)
{
  temp_K <- temp_C + 273.15
  return(temp_K)
}



F_a_K <- function(temp_F)
{
  temp_C <- F_a_C(temp_F)
  temp_K <- C_a_K(temp_C)
  return(temp_K)
  
}
F_a_K(32)
#### Comparar funciones (Composicion de funciones)
C_a_K(F_a_C(32))

### Ejemplo
envolver <- function (original, envoltorio)
{
  respuesta <- c(envoltorio, original, envoltorio)
  return(respuesta)
}
x <- c("Este mensaje esta en asteriscos")
y <- c("***")
envolver(x,y)

### Ejemplo
exterior <- function (v)
{
  primero <- v[1]
  ultimo <- v[length(v)]
  respuesta <- c(primero, ultimo)
  return(respuesta)
}
exterior(1:10)
##### TAREA
### Funcion que tome como argumento el nombre de un archivo y que al momento de aplicar la funcion  despliegue 3 graficas
### que tome de cada columna, promedio, minimo y maximo y eso se va a graficar
