---
title: "6Abril"
author: "Edgar Guevara"
date: "6 de abril de 2018"
output: html_document
---

# G(k) -> Desviacion residual de la iteracion k

# | G(k) - G(k+1) | / 0.1 + |G(k)|  < Epsilonn

```{r}
set1 <- data.frame(x1=1:10, y=c(rep(0,5), rep(1,5)))
mod.fit <- glm( y~ x1, set1, family=binomial(link=logit), trace = TRUE)
names(mod.fit)
mod.fit$coefficients
x11(width = 10, height = 6, pointsize = 12)
par(mfrow =c(1,2))
# Para representar la grafica en un pdf = pdf(file =, width = , height = , colormodel = )
plot(x =set1$x1, y=set1$y, mmain = "Grafica para set1", ylab = "Probabilidad estimada", xlab = expression(x[i]), panel.first = grid(col = "gray", lty = "dotted"))
curve(expr = predict(object = mod.fit, newdata = data.frame(x1=x), type = "response"), col="red", add = T, lwd=2, n=1000)
mod.fit.firth1 <- glm( y~ x1, set1, family=binomial(link=logit), trace = TRUE)
install.packages("logistf")
require(logistf)
mod.fit.firth1 <- logistf(y ~ x1, data=set1)
options(digits = 4)
summary(mod.fit.firth1)
names(mod.fit.firth1)

#pi.hat = Estimados para cada valor de x
set1 <- data.frame(x =set1$x1, pi.hat= mod.fit.firth1$predict)
options(digits = 7)
logistftest(mod.fit.firth1,test = ~ x1 -1, values = 0)
# Coeficientes del nuevo ajuste
beta.hat <- mod.fit.firth1$coefficients
curve(expr = exp(beta.hat[1]+ beta.hat[2]*x)/ (1+exp(beta.hat[1]+ beta.hat[2]*x)), col="blue", add = T, n=1000)
legend(x = 0.5, y =0.8, legend = c("glm()", "logistif()"), lty = c(1,1), lwd = c(2,1), col = c("red","blue"), bty = "n")
mod.fit2 <- glm(y~x1, set1, family = binomial(link = logit), trace = T)
plot(x =set1$x1, y=set1$y, main = "Grafica para set2", ylab = "Probabilidad estimada", xlab = expression(x[i]), panel.first = grid(col = "gray", lty = "dotted"))
curve(expr = predict(object = mod.fit2, newdata = data.frame(x1=x), type = "response"), col="red", add = T, lwd=2, n=1000)
mod.fit.firth2 <- logistf(y ~x1, data = set1)
beta.hat2 <- mod.fit.firth2$coefficients
curve(expr = exp(beta.hat2[1]+ beta.hat2[2]*x)/ (1+exp(beta.hat2[1]+ beta.hat2[2]*x)), col="blue", add = T, n=1000)
legend(x = 0.5, y =0.8, legend = c("glm()", "logistif()"), lty = c(1,1), lwd = c(2,1), col = c("red","blue"), bty = "n")
# .
# .
# .
# .
# PENDIENTE
```


```{r}  
# logit(pi) = beta0 + beta1*x   con valor minimo 0 y valor maximo 1
pi.x0 <- 0.01 
# Valor de beta cuando x=0
beta0 <- log(pi.x0/ (1- pi.x0))
beta0

# valor de beta1 cuando x=1
pi.x1 <- .99
beta1 <- log(pi.x1/ (1- pi.x1))- beta0
beta1

x11()
lwd= que tan ancha se quiere la curva
n= cuantos puntos queremos graficar
curve(expr = exp(beta0+ beta1*x) / (1+exp(beta0+ beta1*x)), xlim = c(0,1), ylab = expression(pi), n=1000, lwd=3, xlab= expression(x[1]))

## simular que un conjunto de datos sigan una distribucion binomial

set.seed(8238)
x1 <- runif(n=500, min= 0, max=1)
pi <- exp(beta0+ beta1*x1) / (1+exp(beta0+ beta1*x1))
head(pi)
set.seed(1829)
y <- rbinom(n=length(x1), size = 1, prob = pi)         
head(data.frame(y, x1, pi), n=10)
#Modelo con los datos anteriores
mod.fitb <- glm(y~ x1, family = binomial(link = logit))
beta0;beta1
beta.hat0<- mod.fitb$coefficients[1]
beta.hat1<- mod.fitb$coefficients[2]
curve(expr = exp(beta.hat0+ beta.hat1*x) / (1+exp(beta.hat0+ beta.hat1*x)), xlim = c(0,1), ylab = expression(pi), n=1000, lwd=3, xlab= expression(x[1]), add = T, col="red")
legend(x=0, y=1, legend = c("Verdadero", "Estimado"), lty = c(1,1), col = c("black", "red"), lwd =c(3,1), bty = "n")






```
